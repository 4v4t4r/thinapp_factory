<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx     ="http://www.springframework.org/schema/tx"
       xmlns:xsi    ="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation=
         "http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/util    http://www.springframework.org/schema/util/spring-util-3.0.xsd
         http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

   <!-- Scan for Transactional annotations -->
   <tx:annotation-driven proxy-target-class="true"/>

   <!--
      Use a generic property holder to store all the configuration stuff we might want to change.
      This saves us having to hunt all over for the parameters to tweak when we change the
      data source.
   -->
   <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="locations">
         <list>
            <!--  Sequence of these files matter. Properties defined in later files will
                  overwrite those loaded previously.
            -->
             <!-- Webapp properties defined in web WAR file -->
             <value>classpath:webui.properties</value>
             <!-- General properties set by the TAF appliance -->
             <value>classpath:appfactory.properties</value>
             <!-- Property file with the version of the TAF Appliance -->
             <value>classpath:appliance-version.properties</value>
             <!-- Webapp properties local to developer builds only -->
             <value>classpath:webui-local.properties</value>
         </list>
      </property>
      <property name="ignoreResourceNotFound" value="true" />
   </bean>

   <!--  Use a default Spring transaction manager -->
   <bean id="transactionManager"
         class="org.springframework.orm.hibernate3.HibernateTransactionManager">
      <property name="sessionFactory" ref="sessionFactory"/>
   </bean>

   <!--  Use a default Spring session factory -->
   <bean id="sessionFactory"
         class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
      <property name="dataSource" ref="dataSource"/>
      <property name="annotatedClasses">
         <list>
            <value>com.vmware.appfactory.application.model.Application</value>
            <value>com.vmware.appfactory.application.model.AppDownload</value>
            <value>com.vmware.appfactory.application.model.AppInstall</value>
            <value>com.vmware.appfactory.application.model.AppIcon</value>
            <value>com.vmware.appfactory.application.model.AppBuildRequest</value>
            <value>com.vmware.appfactory.build.model.Build</value>
            <value>com.vmware.appfactory.build.model.BuildFile</value>
            <value>com.vmware.appfactory.build.model.BuildIcon</value>
            <value>com.vmware.appfactory.config.model.ConfigSetting</value>
            <value>com.vmware.appfactory.feed.model.Feed</value>
            <value>com.vmware.appfactory.fileshare.model.FileShare</value>
            <value>com.vmware.appfactory.recipe.model.Recipe</value>
            <value>com.vmware.appfactory.recipe.model.RecipeVariable</value>
            <value>com.vmware.appfactory.recipe.model.RecipeFile</value>
            <value>com.vmware.appfactory.recipe.model.RecipeStep</value>
            <value>com.vmware.appfactory.recipe.model.RecipeCommand</value>
            <value>com.vmware.appfactory.recipe.model.RecipeAppKey</value>
            <value>com.vmware.appfactory.datasource.model.DataSource</value>
         </list>
      </property>
      <property name="hibernateProperties">
         <props>
            <prop key="hibernate.dialect">${my.hibernate.dialect}</prop>
            <prop key="hibernate.hbm2ddl.auto">${my.hibernate.hbm2ddl}</prop>
         </props>
      </property>
   </bean>

   <!--  Define the data source AppFactory will use -->
   <bean id="dataSource"
         class="org.springframework.jdbc.datasource.DriverManagerDataSource">
      <property name="driverClassName" value="${my.datasource.driver}" />
      <property name="url" value="${my.datasource.url}" />
      <property name="username" value="${my.datasource.username}" />
      <property name="password" value="${my.datasource.password}" />
   </bean>

</beans>
