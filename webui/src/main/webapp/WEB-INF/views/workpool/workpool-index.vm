################################################################################
## ThinApp Factory WebUI
## (c) 2011 VMware, Inc. All rights reserved.
################################################################################

################################################################################
## workpool-index.vm
##
## This file contains the HTML view for showing a list of workpools.
## No data is shown in the view by default: An ajax call is made to the server
## to download feed data and populate the table dynamically.
################################################################################

<script type="text/javascript" charset="UTF-8">
#if ($newUI)
#set($insideTab=true)
addLoad(function () {
#end
   VmTAF.contentNavigator.AddReadyFunction(function _workpoolReady() {
      VmTAF.wpMgr = new WorkpoolManager(
         #if ($cloneSupported) true #else false #end ,
         #if ($isWS) true  #else false #end ,
         $("#workpool-table"),
         '$!status');
      VmTAF.wpMgr.UpdateWorkpool(30000);

      VmTAF.imgMgr = new VmImageManager(true, $("#image-table"));
      VmTAF.imgMgr.UpdateImage(30000);

      $('#wpImgButtons').buttonset().change(function () {
         $(".wpImgTable").toggle();
      });
   });

   VmTAF.contentNavigator.AddCleanupFunction(function _workpoolCleanup() {
      VmTAF.wpMgr = VmTAF.wpMgr.Destruct();

      VmTAF.imgMgr = VmTAF.imgMgr.Destruct();
      $('#img-delete-dialog').remove();
   });
#if ($newUI)
});
#end
</script>

#parse("include/main-top.vm")

#if ($cloneSupported)
   <div id="wpImgButtons" class="choice-buttons">
      ## Button ids are based on BuildController.BuildView enums.
      <input type="radio" name="wp-img" id="idWpImg-Wp" onchange="VmTAF.wpMgr.refresh();"
#if ("$subtab" != "image")
             checked="checked"
#end
            />
      <label for="idWpImg-Wp">#springMessage('T.BUTTON.VIEW_WORKPOOL')</label>
      <input type="radio" name="wp-img" id="idWpImg-Img" onchange="VmTAF.imgMgr.refresh();"
#if ("$subtab" == "image")
             checked="checked"
#end
            />
      <label for="idWpImg-Img">#springMessage('T.BUTTON.VIEW_IMAGE')</label>

   </div>
#end
## Note: the form is mainly used for style, it is not used to POST data
## to the server.
<form class="primary wpImgTable" onsubmit="return false;"
#if ("$subtab" == "image")
      style="display:none;"
#end
      >
   ##
   ## Buttons for interacting with datastores.
   ##
   <div class="button-row">
      <button class="button single-button" id="wp-add"
         onclick="VmTAF.contentNavigator.LoadPage('/workpools/create');">
         #springMessage('T.COMMON.ADD')
      </button>

      <button class="button" id="wp-delete"
         onclick="VmTAF.wpMgr.InitDeleteSelectedWorkpool($('#wp-delete-dialog'));">
         #springMessage('T.COMMON.DELETE')
      </button>

      ## TODO: we could get a list of status values from the server, and
      ## create these buttons dynamically. This will remove a hard coded
      ## string dependency.
      <!--
      <button class="button"
         onclick="VmTAF.wpMgr.SetSelectedWorkpool('enable');">
         &rarr;Enable
      </button>
      <button class="button"
         onclick="VmTAF.wpMgr.SetSelectedWorkpool('disable');">
         &rarr;Disable
      </button>
      -->
   </div>

   ##
   ## Table for workpool
   ## This gets populated dynamically using Ajax calls from Javascript.
   ##
   <table id="workpool-table" class="data">
      <thead>
         <tr>
            <th width="20px"><input type="checkbox" class="table-row-selector"/></th>
            <th width="150px">Workpool Name</th>
            <th width="70px">Type</th>
            <th width="100px">OS Type</th>
            <th width="75px">OS Variant</th>
            <th>Maximum Instances</th>
            <th>Status</th>
            ## If clone is supported, workpools will have images and their status.
            #if ($cloneSupported)
               <th>Image Name</th>
               <th width="120px">Image Status</th>
            #end
            <th width="50px">Default</th>
         </tr>
      </thead>
      <tbody>
         ## Data is loaded dynamically from TableWrapper
      </tbody>
   </table>
</form>

<div id="wp-delete-dialog" class="no-show"></div>

## Note: Form is mainly used for style & not to POST data to the server.
<form class="primary wpImgTable" onsubmit="return false;"
#if ("$subtab" != "image")
   style="display:none;"
#end
      >

##
## Buttons for interacting with datastores.
##
   <div class="button-row">
      <button class="button" id="img-delete"
              onclick="VmTAF.imgMgr.InitDeleteSelectedImage($('#img-delete-dialog'));">
         #springMessage('T.COMMON.DELETE')
      </button>
   </div>
##
## Table for workpool images
## This gets populated dynamically using Ajax calls from Javascript.
##
   <table id="image-table" class="data">
      <thead>
      <tr>
         <th width="20px"><input type="checkbox" class="table-row-selector"/></th>
         <th width="220px">Image Name</th>
         <th>Associated Workpools</th>
         <th width="200px">Status</th>
         <th width="140px">OS Type</th>
         <th width="140px">OS Variant</th>
      </tr>
      </thead>
      <tbody>
      ## Data is loaded dynamically from TableWrapper
      </tbody>
   </table>
</form>

<div id="img-delete-dialog" class="no-show">
## Placeholder for delete popup to ask for vm deletion while removing image from taf.
</div>

#parse("include/main-bottom.vm")